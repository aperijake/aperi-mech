#!/bin/bash

# Initialize variables with default values
BUILD_TYPE="Release"
CODE_COVERAGE=false
XCODE=false

# Parse command-line options
while [[ $# -gt 0 ]]; do
	key="$1"
	case ${key} in
	-t | --build-type)
		BUILD_TYPE="$2"
		shift
		shift
		;;
	-c | --code-coverage)
		CODE_COVERAGE=true
		BUILD_TYPE="Debug"
		echo "Requested code coverage. Build type set to Debug"
		shift
		;;
	-x | --xcode)
		XCODE=true
		echo "Requested Xcode project generation."
		shift
		;;
	*)
		echo "Unknown option: $1"
		exit 1
		;;
	esac
done

# Activate Spack environment
eval $(spack env activate --sh aperi-mech)

# Create build directory
mkdir -p ../aperi-mech_build
cd ../aperi-mech_build || exit

# Remove CMakeCache if it exists
rm -f CMakeCache.txt

# Configure CMake with specified build type and other options
cmake_command="cmake"

cmake_command+=" -D CMAKE_BUILD_TYPE:STRING=\"${BUILD_TYPE}\""
cmake_command+=" -D TRILINOS_PATH:FILEPATH=$(spack location -i trilinos)"
cmake_command+=" -D GTEST_PATH:FILEPATH=$(spack location -i googletest)"
cmake_command+=" -D YAML-CPP_PATH:FILEPATH=$(spack location -i yaml-cpp)"
cmake_command+=" -D MFEM_PATH:FILEPATH=$(spack location -i mfem)"
cmake_command+=" -D HYPRE_PATH:FILEPATH=$(spack location -i hypre)"
cmake_command+=" -D EIGEN_PATH:FILEPATH=$(spack location -i eigen)"
if ${CODE_COVERAGE}; then
	cmake_command+=" -D LCOV_BIN_DIR:FILEPATH=$(spack location -i lcov)/bin"
	cmake_command+=" -D KOKKOS_PATH:FILEPATH=$(spack location -i kokkos)"
fi
cmake_command+=" -D CODE_COVERAGE:BOOL=${CODE_COVERAGE}"
if [[ ${BUILD_TYPE} == "Debug" ]]; then
	cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-O0 -g -Wall -std=c++20 -pedantic -Wno-long-long -ftrapv -Wno-deprecated'"
elif [[ ${BUILD_TYPE} == "Release" ]]; then
	cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-O2 -Wall -std=c++20 -pedantic -Wno-long-long -ftrapv -Wno-deprecated'"
elif [[ ${BUILD_TYPE} == "RelWithDebInfo" ]]; then
	cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-O2 -g -Wall -std=c++20 -pedantic -Wno-long-long -ftrapv -Wno-deprecated'"
else
	echo "Unknown build type: ${BUILD_TYPE}"
	exit 1
fi
if ${XCODE}; then
	mkdir -p ../aperi-mech_xcode_build
	cd ../aperi-mech_xcode_build || exit
	cmake_command+=" -G Xcode -B . -S "
fi
cmake_command+=" ../aperi-mech"

echo "CMake Command: ${cmake_command}"
eval "${cmake_command}"
