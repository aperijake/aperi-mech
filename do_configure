#!/bin/bash
set -e

# Initialize variables with default values
BUILD_TYPE="Release"
CODE_COVERAGE=false
GPU=false

# Get the current directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Parse command-line options
while [[ $# -gt 0 ]]; do
	key="$1"
	case ${key} in
	-t | --build-type)
		BUILD_TYPE="$2"
		shift
		shift
		;;
	-c | --code-coverage)
		CODE_COVERAGE=true
		BUILD_TYPE="Debug"
		echo "Requested code coverage. Build type set to Debug"
		shift
		;;
	-g | --gpu)
		GPU=true
		echo "Requested GPU support."
		shift
		;;
	*)
		echo "Unknown option: $1"
		exit 1
		;;
	esac
done

# Build directory base
BUILD_DIR="build/"

# Append to build directory based on build type
BUILD_DIR+="${BUILD_TYPE}"

# Set build directory and Spack environment based on GPU option
if ${GPU}; then
	BUILD_DIR+="_gpu"
	spack env activate aperi-mech-gpu-develop
else
	spack env activate aperi-mech
fi

[[ ${CODE_COVERAGE} == true ]] && BUILD_DIR+="_cov"

# Create build directory
mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}" || exit

# Remove CMakeCache if it exists
[[ -f CMakeCache.txt ]] && rm CMakeCache.txt

# Check for cmake in the spack environment, if not found, use the system cmake
if spack find -p cmake; then
	cmake=$(spack location -i --first cmake)/bin/cmake
else
	cmake=cmake
fi

# Configure CMake with specified build type and other options
cmake_command="${cmake}"

cmake_command+=" -D GPU:BOOL=${GPU}"
cmake_command+=" -D CMAKE_BUILD_TYPE:STRING=\"${BUILD_TYPE}\""
cmake_command+=" -D TRILINOS_PATH:FILEPATH=$(spack location -i trilinos)"
cmake_command+=" -D Kokkos_ROOT:FILEPATH=$(spack location -i kokkos)"
cmake_command+=" -D EIGEN_PATH:FILEPATH=$(spack location -i eigen)"
cmake_command+=" -D GTEST_PATH:FILEPATH=$(spack location -i googletest)"
cmake_command+=" -D YAML-CPP_PATH:FILEPATH=$(spack location -i yaml-cpp)"
cmake_command+=" -D MFEM_PATH:FILEPATH=$(spack location -i mfem)"
cmake_command+=" -D HYPRE_PATH:FILEPATH=$(spack location -i hypre)"
cmake_command+=" -D OPENMPI_PATH:FILEPATH=$(spack location -i openmpi)"
if [[ ${GPU} == true ]]; then
    cmake_command+=" -D COMPADRE_PATH:FILEPATH=$(spack location -i compadre)"
fi

# Add the lcov path to the cmake command
[[ ${CODE_COVERAGE} == true ]] && cmake_command+=" -D LCOV_BIN_DIR:FILEPATH=$(spack location -i lcov)/bin"
cmake_command+=" -D CODE_COVERAGE:BOOL=${CODE_COVERAGE}"

# Add the cuda compiler to the cmake command
[[ ${GPU} == true ]] && cmake_command+=" -D CMAKE_CUDA_COMPILER:FILEPATH=$(spack location -i cuda)/bin/nvcc"

# Add the cuda flags to the cmake command. There has got to be a better way to do this. Needed?
[[ ${GPU} == true ]] && cmake_command+=" -D CMAKE_CUDA_FLAGS=\"-arch=sm_$(spack find kokkos | grep 'cuda_arch=' | awk -F'cuda_arch=' 'NR==1 {print $2}' | awk '{print $1}')\""

# Add the C++ compiler to the cmake command. There has got to be a better way to do this.
kokkos_compiler=$(spack find --show-full-compiler kokkos | grep kokkos | tail -n 1 | cut -d'%' -f2)
kokkos_cxx_path=$(spack compiler info "${kokkos_compiler}" | grep 'cxx' | awk '{print $3}' | grep -v '^$')
cmake_command+=" -D CMAKE_CXX_COMPILER:FILEPATH=${kokkos_cxx_path}"

# Add the C compiler to the cmake command. Also, there has got to be a better way to do this.
kokkos_c_path=$(spack compiler info "${kokkos_compiler}" | grep 'cc' | awk '{print $3}' | grep -v '^$')
cmake_command+=" -D CMAKE_C_COMPILER:FILEPATH=${kokkos_c_path}"

# Add the C++ flags to the cmake command
cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-Wall -pedantic -Wno-long-long -ftrapv -Wno-deprecated -Wno-unknown-pragmas'"

# Add the flag to export compile commands to the cmake command
cmake_command+=" -D CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON"

# Add the script path to the stk_ngp_basic source code
cmake_command+=" ${SCRIPT_DIR}"

# Print and execute the cmake command
echo "CMake Command: ${cmake_command}"
eval "${cmake_command}"
