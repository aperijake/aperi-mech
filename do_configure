#!/bin/bash
set -e

# Get the current directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Initialize variables with default values
BUILD_TYPE="Release"
CHECK_CODE_COVERAGE=OFF
USE_GPU=OFF
USE_PROTEGO_MECH=OFF
USE_SANITIZER=OFF
GPU_OPT_LEVEL=3
INSTALL_PREFIX="${SCRIPT_DIR}/install"
OSX_DEPLOYMENT_TARGET=""

# Parse command-line options
while [[ $# -gt 0 ]]; do
	key="$1"
	case ${key} in
	-t | --build-type)
		BUILD_TYPE="$2"
		shift
		shift
		;;
	-c | --code-coverage)
		CHECK_CODE_COVERAGE=ON
		BUILD_TYPE="Debug"
		echo "Requested code coverage. Build type set to Debug"
		shift
		;;
	-g | --gpu)
		USE_GPU=ON
		echo "Requested GPU support."
		shift
		;;
	-p | --protego-mech)
		USE_PROTEGO_MECH=ON
		echo "Including protego-mech."
		shift
		;;
	-s | --sanitizer)
		USE_SANITIZER=ON
		BUILD_TYPE="Debug"
		echo "Requested sanitizer. Build type set to Debug"
		shift
		;;
	--gpu-opt)
		GPU_OPT_LEVEL="$2"
		echo "Setting GPU optimization level to O$2"
		shift
		shift
		;;
	-i | --install-prefix)
		INSTALL_PREFIX="$2"
		shift
		shift
		;;
	--osx-deployment-target)
		OSX_DEPLOYMENT_TARGET="$2"
		echo "Setting macOS deployment target to $2"
		shift
		shift
		;;
	*)
		echo "Unknown option: $1"
		exit 1
		;;
	esac
done

# If some of the spack commmands below fail, make sure the correct environment is activated. e.g.:
# spack env activate aperi-mech

# Check for cmake in the spack environment, if not found, use the system cmake
if spack find -p cmake; then
	cmake=$(spack location -i --first cmake)/bin/cmake
else
	cmake=cmake
fi

# Configure CMake with specified build type and other options
cmake_command="${cmake}"

cmake_command+=" -D USE_GPU:BOOL=${USE_GPU}"
cmake_command+=" -D USE_PROTEGO_MECH:BOOL=${USE_PROTEGO_MECH}"
cmake_command+=" -D USE_SANITIZER:BOOL=${USE_SANITIZER}"
cmake_command+=" -D CMAKE_BUILD_TYPE:STRING=\"${BUILD_TYPE}\""
cmake_command+=" -D TRILINOS_PATH:FILEPATH=$(spack location -i trilinos)"
cmake_command+=" -D Kokkos_ROOT:FILEPATH=$(spack location -i kokkos)"
# If eigen is at /home/aperi-mech_docker/eigen_install, use that path. Otherwise, use the spack location
eigen_path=""
if [[ -d /home/aperi-mech_docker/eigen_install ]]; then
	eigen_path="/home/aperi-mech_docker/eigen_install"
	# Uninstall eigen from spack so that the local eigen is used
	spack uninstall -y eigen || true
else
	eigen_path=$(spack location -i eigen)
fi
cmake_command+=" -D EIGEN_PATH:FILEPATH=${eigen_path}"
cmake_command+=" -D GTEST_PATH:FILEPATH=$(spack location -i googletest)"
cmake_command+=" -D YAML-CPP_PATH:FILEPATH=$(spack location -i yaml-cpp)"
cmake_command+=" -D OPENMPI_PATH:FILEPATH=$(spack location -i openmpi)"
cmake_command+=" -D COMPADRE_PATH:FILEPATH=$(spack location -i compadre)"

# Add the lcov path to the cmake command
if [[ ${CHECK_CODE_COVERAGE} == "ON" ]]; then
	# Verify that lcov is in /usr/bin
	if [[ -f /usr/bin/lcov ]]; then
		cmake_command+=" -D LCOV_BIN_DIR:FILEPATH=/usr/bin"
		echo "lcov found in /usr/bin."
	else
		echo "lcov not found in /usr/bin. Checking Spack environment."
		if spack find -p lcov; then
			cmake_command+=" -D LCOV_BIN_DIR:FILEPATH=$(spack location -i --first lcov)/bin"
		else
			echo "lcov not found in Spack environment."
			echo "lcov is required for code coverage. Please install lcov. Exiting."
			exit 1
		fi
	fi
fi
cmake_command+=" -D CHECK_CODE_COVERAGE:BOOL=${CHECK_CODE_COVERAGE}"

if [[ ${USE_GPU} == "ON" ]]; then
	# Add the cuda path to the cmake command
	CUDA_PATH=$(spack location -i cuda)
	# Pass the GPU optimization level to CMake
	cmake_command+=" -D GPU_OPTIMIZE_LEVEL=${GPU_OPT_LEVEL}"
	# Add the cuda compiler to the cmake command
	cmake_command+=" -D CMAKE_CUDA_COMPILER:FILEPATH=${CUDA_PATH}/bin/nvcc"
	# Add the cuda flags to the cmake command. There has got to be a better way to do this. Needed?
	cmake_command+=' -D CMAKE_CUDA_FLAGS="-arch=sm_'
	arch_string=$(spack find kokkos | grep 'cuda_arch=' | awk -F'cuda_arch=' 'NR==1 {print $2}' | awk '{print $1}') || true
	cmake_command+="${arch_string}\""
fi

# Add the macOS deployment target if specified
if [[ -n ${OSX_DEPLOYMENT_TARGET} ]]; then
	cmake_command+=" -D CMAKE_OSX_DEPLOYMENT_TARGET:STRING=${OSX_DEPLOYMENT_TARGET}"
fi

# Add the C++ flags to the cmake command
cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-Wall -pedantic -Wno-long-long -ftrapv -Wno-deprecated -Wno-unknown-pragmas -Wno-psabi'"
# cmake_command+=" -D CMAKE_CXX_FLAGS:STRING='-Wall -Wextra -Werror -pedantic -Wno-long-long -ftrapv -Wno-deprecated -Wno-unknown-pragmas'"

# Add the flag to export compile commands to the cmake command
cmake_command+=" -D CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON"

# Add the flag to turn off C++ extensions to the cmake command
cmake_command+=" -D CMAKE_CXX_EXTENSIONS=Off"

# Add the script path to the stk_ngp_basic source code
cmake_command+=" ${SCRIPT_DIR}"

# Set the install prefix
cmake_command+=" -D CMAKE_INSTALL_PREFIX:PATH=${INSTALL_PREFIX}"

# Create build directory
# Build directory base
BUILD_DIR="build/${BUILD_TYPE}"

# Prepend to build directory based on protego-mech usage
if [[ ${USE_PROTEGO_MECH} == "ON" ]]; then
	BUILD_DIR="protego-mech/build/${BUILD_TYPE}"
fi

# Append to build directory based on GPU usage
if [[ ${USE_GPU} == "ON" ]]; then
	BUILD_DIR+="_gpu"
fi

# Append to build directory based on code coverage
if [[ ${CHECK_CODE_COVERAGE} == "ON" ]]; then
	BUILD_DIR+="_cov"
fi

# Append to build directory based on sanitizer
if [[ ${USE_SANITIZER} == "ON" ]]; then
	BUILD_DIR+="_san"
fi

# Create the build directory and change to it
mkdir -p "${BUILD_DIR}"
cd "${BUILD_DIR}" || exit

# Remove CMakeCache if it exists
[[ -f CMakeCache.txt ]] && rm CMakeCache.txt

# Print and execute the cmake command
echo "CMake Command: ${cmake_command}"
eval "${cmake_command}"
