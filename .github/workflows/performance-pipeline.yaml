name: Performance Pipeline

# Will run after the CI/CD pipeline completes successfully
# Is expecting that the CI/CD pipeline will have built the code already.
on:
  workflow_run:
    workflows: [CI/CD Pipeline]
    types:
      - completed
  workflow_dispatch: ~ # Allows manual triggering of the workflow

permissions:
  # deployments permission to deploy GitHub pages website
  deployments: write
  # contents permission to update benchmark contents in gh-pages branch
  contents: write

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && github.ref == 'refs/heads/main') }}

    outputs:
      vm_started: ${{ steps.vm-status.outputs.vm_started }}

    steps:
      - name: Checkout Code on Runner # Just to get required actions in .github/. The actual code checkout is done on the VM
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Access Azure VM
        id: vm-status
        uses: azure/CLI@v2
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Checking if VM is running..."
            VM_STATUS=$(az vm get-instance-view --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }} --query instanceView.statuses[1].displayStatus --output tsv)
            if [ "$VM_STATUS" != "VM running" ]; then
              echo "Starting VM..."
              az vm start --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
              echo "vm_started=true" >> $GITHUB_OUTPUT
            else
              echo "VM is already running"
              echo "vm_started=false" >> $GITHUB_OUTPUT
            fi

      - name: Common SSH and Azure CLI Setup
        uses: ./.github/actions/common-ssh-and-azure-steps
        with:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Checkout Code on VM
        # This step is only run if the workflow was triggered manually, assumes that the code is already checked out on the VM otherwise
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
              set -e # Exit on error

              cd ~/aperi-mech
              echo "Fetching git branches..."
              git fetch --all

              echo "Stashing any unstaged changes..."
              git stash --include-untracked

              echo "Checking out main branch and pulling latest changes..."
              git checkout main
              git pull origin main --rebase

              # Configure git to use the CICD_REPO_SECRET for fetching submodules
              if ! git config --global --get url."https://${{ secrets.CICD_REPO_SECRET }}@github.com/".insteadOf; then
                git config --global url."https://${{ secrets.CICD_REPO_SECRET }}@github.com/".insteadOf "https://github.com/"
              fi
              # For authenticated access to the repository the secret will be changed periodically and the git config will have to be updated
              # On the VM, do:
              #   git config --global --get-regexp url.*.insteadOf
              # to see the current git config. And then remove the config with:
              #   git config --global --unset-all url.https://OLD_SECRET@github.com/.insteadof
              # Where OLD_SECRET is the old secret from the first command. Then add the new secret with:
              #   git config --global url."https://NEW_SECRET@github.com/".insteadOf "
              # Where the NEW_SECRET is genertated in developer settings on GitHub and added to the repository secrets.
              # or, it will be automatically updated when this action runs again.

              echo "Initializing and updating submodules..."
              git submodule update --init --recursive --remote

              echo "Checking out appropriate branch..."
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                git fetch origin ${{ github.sha }}
                git checkout ${{ github.sha }}
              elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
                git checkout main
              else
                git checkout ${{ github.ref }}
              fi
              git lfs pull # Pull LFS files
              rm -rf build # Remove build directory, this prevents some false positives in tests
          EOF

      - name: Skipping Checkout Code on VM
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: echo "Skipping checkout code on VM. Assuming code is already checked out from CI/CD pipeline run."

      - name: Clean old JSON and CSV files
        shell: bash
        run: ./clean_old_performance_results.sh ${{ secrets.VM_IP }} ${{ secrets.VM_USERNAME }}

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: setup
    concurrency:
      group: performance-vm-ci-cd
      cancel-in-progress: false
    steps:
      - name: Skipping build-release
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: echo "Skipping build-release. Assuming code is already built from CI/CD pipeline run."

      - name: Common Runner Config Steps
        # Only run if the workflow was triggered manually, assumes that the code is already built otherwise
        # Also, want the job to run and just skip the steps. otherwise following steps might hang
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/common-runner-config-steps
        with:
          lfs: false

      - name: Build Release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/build-action
        with:
          build-type: Release
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: false

  build-release-gpu:
    name: Build Release, GPU
    runs-on: ubuntu-latest
    needs: setup
    concurrency:
      group: performance-vm-ci-cd
      cancel-in-progress: false
    steps:
      - name: Skipping build-release-gpu
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: echo "Skipping build-release-gpu. Assuming code is already built from CI/CD pipeline run."

      - name: Common Runner Config Steps
        # Only run if the workflow was triggered manually, assumes that the code is already built otherwise
        # Also, want the job to run and just skip the steps. otherwise following steps might hang
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/common-runner-config-steps
        with:
          lfs: false

      - name: Build Release
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: ./.github/actions/build-action
        with:
          build-type: Release
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: true

  performance-test-release:
    name: Performance Test Release
    runs-on: ubuntu-latest
    needs: [setup, build-release]
    concurrency:
      group: performance-vm-ci-cd
      cancel-in-progress: false
    env:
      BUILD_TYPE: Release
      GPU: false
    steps:
      - name: Common Runner Config Steps
        uses: ./.github/actions/common-runner-config-steps
        with:
          lfs: false

      - name: Common SSH and Azure CLI Setup
        uses: ./.github/actions/common-ssh-and-azure-steps
        with:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run gtest performance tests
        uses: ./.github/actions/run-gtest-performance-tests
        with:
          build-type: ${{ env.BUILD_TYPE }}
          VM_IP: ${{ secrets.VM_IP }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: ${{ env.GPU }}

      - name: Run aperi-mech performance tests, serial
        # Continue on error to ensure that the aperi-mech performance tests run even if the gtest performance tests fail
        continue-on-error: true
        uses: ./.github/actions/run-aperi-mech-performance-tests
        with:
          VM_IP: ${{ secrets.VM_IP }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: ${{ env.GPU }}
          parallel: false

      - name: Run aperi-mech performance tests, parallel
        uses: ./.github/actions/run-aperi-mech-performance-tests
        with:
          VM_IP: ${{ secrets.VM_IP }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: ${{ env.GPU }}
          parallel: true

  performance-test-release-gpu:
    name: Performance Test Release, GPU
    runs-on: ubuntu-latest
    needs: [setup, build-release-gpu]
    concurrency:
      group: performance-vm-ci-cd
      cancel-in-progress: false
    env:
      BUILD_TYPE: Release
      GPU: true
    steps:
      - name: Common Runner Config Steps
        uses: ./.github/actions/common-runner-config-steps
        with:
          lfs: false

      - name: Common SSH and Azure CLI Setup
        uses: ./.github/actions/common-ssh-and-azure-steps
        with:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run gtest performance tests
        uses: ./.github/actions/run-gtest-performance-tests
        with:
          build-type: ${{ env.BUILD_TYPE }}
          VM_IP: ${{ secrets.VM_IP }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: ${{ env.GPU }}

      - name: Run aperi-mech performance tests, serial
        # Continue on error to ensure that the aperi-mech performance tests run even if the gtest performance tests fail
        continue-on-error: true
        uses: ./.github/actions/run-aperi-mech-performance-tests
        with:
          VM_IP: ${{ secrets.VM_IP }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          gpu: ${{ env.GPU }}
          parallel: false

  upload-benchmark-results:
    name: Upload Benchmark Results
    runs-on: ubuntu-latest
    needs: [setup, performance-test-release, performance-test-release-gpu]
    steps:
      - name: Checkout Code on Runner # Just to get required actions in .github/. The actual code checkout is done on the VM
        uses: actions/checkout@v4
        with:
          lfs: false

      - name: Common SSH and Azure CLI Setup
        uses: ./.github/actions/common-ssh-and-azure-steps
        with:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Collect performance test results
        shell: bash
        run: ./collect_performance_results.sh ${{ secrets.VM_IP }} ${{ secrets.VM_USERNAME }}

      - name: Run performance comparison script
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
              set -e # Exit on error

              cd ~/aperi-mech
              python3 test/utils/scripts/check_new_performance_results.py
            EOF

      - name: Transfer benchmark data from VM to GitHub Actions runner
        shell: bash
        run: |
          build_path=/home/${{ secrets.VM_USERNAME }}/aperi-mech/build
          # Copy all performance test results to the runner
          scp -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }}:${build_path}/*.json .

          gh-pages_path=/home/${{ secrets.VM_USERNAME }}/aperi-mech/gh-pages
          # Copy all performance test results to the runner
          scp -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }}:${gh-pages_path}/*.json .

      - name: Store gtest benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_gtest_all_results.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/gtest/AperiAzureGPU2
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_aperi_mech_all_results.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech/AperiAzureGPU2
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      # Store detailed benchmark results for aperi-mech fem tests
      - name: Store aperi-mech detailed benchmark result for fem create_solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_create_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/fem/create_solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for fem create_element
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_create_element.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/fem/create_element
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for fem solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/fem/solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      # Store detailed benchmark results for aperi-mech sfem tests
      - name: Store aperi-mech detailed benchmark result for fem_strain_smoothing create_solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_strain_smoothing_create_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/sfem/create_solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for fem_strain_smoothing create_element
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_strain_smoothing_create_element.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/sfem/create_element
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for fem_strain_smoothing solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_fem_strain_smoothing_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/sfem/solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      # Store detailed benchmark results for aperi-mech rkpm tests
      - name: Store aperi-mech detailed benchmark result for rkpm create_solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_create_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm/create_solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for rkpm create_element
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_create_element.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm/create_element
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for rkpm solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm/solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      # Store detailed benchmark results for aperi-mech rkpm_nodal tests
      - name: Store aperi-mech detailed benchmark result for rkpm_nodal create_solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_nodal_create_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm_nodal/create_solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for rkpm_nodal create_element
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_nodal_create_element.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm_nodal/create_element
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

      - name: Store aperi-mech detailed benchmark result for rkpm_nodal solver
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Benchmark
          tool: customSmallerIsBetter
          output-file-path: performance_rkpm_nodal_solver.json
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench/aperi_mech_detailed/AperiAzureGPU2/rkpm_nodal/solver
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          alert-threshold: 120%
          comment-on-alert: true
          summary-always: true
          alert-comment-cc-users: "@aperijake"
          fail-on-alert: true
          fail-threshold: 300%

  teardown:
    runs-on: ubuntu-latest
    name: Teardown
    needs:
      [
        setup,
        build-release,
        build-release-gpu,
        performance-test-release,
        performance-test-release-gpu,
        upload-benchmark-results,
      ]
    steps:
      # For debugging purposes
      - name: Print VM status
        if: always()
        run: |
          echo "VM started: ${{ needs.setup.outputs.vm_started }}"

      - name: Stop Azure VM
        if: always() && needs.setup.outputs.vm_started == 'true'
        uses: azure/CLI@v2
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Deallocating VM..."
            az vm deallocate --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
            if [ $? -eq 0 ]; then
                echo "VM deallocated successfully"
            else
                echo "Failed to deallocate VM"
                exit 1
            fi
