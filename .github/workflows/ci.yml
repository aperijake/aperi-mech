name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  workflow_dispatch: ~ # Allows manual triggering of the workflow

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Access Azure VM
        uses: azure/CLI@v1
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Checking if VM is running..."
            VM_STATUS=$(az vm get-instance-view --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }} --query instanceView.statuses[1].displayStatus --output tsv)
            if [ "$VM_STATUS" != "VM running" ]; then
              echo "Starting VM..."
              az vm start --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
              echo "vm_started=true" >> $GITHUB_ENV
            else
              echo "VM is already running"
              echo "vm_started=false" >> $GITHUB_ENV
            fi

      - name: Create .ssh directory
        run: |
          mkdir -p ~/.ssh

      - name: Add SSH key to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      - name: Add SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Start SSH agent and add key
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Set Azure CLI config directory
        run: echo "AZURE_CONFIG_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Start Docker container
        run: |
          ssh -tt ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose up -d ${{ secrets.DOCKER_SERVICE }}
          EOF

      - name: Build project
        run: |
          ssh -tt ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose exec ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              git fetch origin +refs/pull/*:refs/remotes/origin/pr/*
              if [ "${{ github.event_name }}" = "pull_request" ]; then
                git checkout ${{ github.sha }}
              else
                git checkout ${{ github.ref }}
              fi
              . ~/spack/share/spack/setup-env.sh
              ./do_configure
              cd build/Release
              make clean
              make -j 4
            '
          EOF

      - name: Run unit tests
        run: |
          ssh -tt ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose exec ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Release
              make run_all_unit_tests
            '
          EOF

      - name: Run unit tests in parallel
        run: |
          ssh -tt ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose exec ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Release
              mpirun -np 3 ./unit_tests
            '
          EOF

      - name: Stop Docker container
        if: always()
        run: |
          ssh -tt ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose down
          EOF

      - name: Stop Azure VM
        if: always() && env.vm_started == 'true'
        uses: azure/CLI@v1
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Deallocating VM..."
            az vm deallocate --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
            if [ $? -eq 0 ]; then
                echo "VM deallocated successfully"
            else
                echo "Failed to deallocate VM"
                exit 1
            fi
