name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch: ~ # Allows manual triggering of the workflow

permissions:
  contents: read

concurrency:
  group: vm-ci-cd
  cancel-in-progress: false

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
        vm_started: ${{ steps.vm-status.outputs.vm_started }}

    steps:
      - name: Access Azure VM
        id: vm-status
        uses: azure/CLI@v2
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Checking if VM is running..."
            VM_STATUS=$(az vm get-instance-view --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }} --query instanceView.statuses[1].displayStatus --output tsv)
            if [ "$VM_STATUS" != "VM running" ]; then
              echo "Starting VM..."
              az vm start --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
              echo "vm_started=true" >> $GITHUB_OUTPUT
            else
              echo "VM is already running"
              echo "vm_started=false" >> $GITHUB_OUTPUT
            fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:

      - name: Create .ssh directory
        run: |
          mkdir -p ~/.ssh

      - name: Add SSH key to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      - name: Add SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Start SSH agent and add key
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Set Azure CLI config directory
        run: echo "AZURE_CONFIG_DIR=$(mktemp -d)" >> $GITHUB_ENV

      - name: Check out code
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            echo "Fetching git branches..."
            git fetch origin +refs/pull/*:refs/remotes/origin/pr/*

            echo "Checking out appropriate branch..."
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              git checkout ${{ github.sha }}
            elif [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
              git checkout main
              git pull origin main
            else
              git checkout ${{ github.ref }}
            fi
          EOF

      - name: Build project, Release
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech
              echo "Setting up Spack environment..."
              . ~/spack/share/spack/setup-env.sh

              echo "Configuring project..."
              ./do_configure

              echo "Building project..."
              cd build/Release
              make clean
              make -j 4
            '  || { echo "Build project step failed"; exit 1; }
          EOF

      - name: Run unit tests, Release
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Release
              make run_all_unit_tests
            '  || { echo "Unit tests step failed"; exit 1; }
          EOF

      - name: Run unit tests in parallel, Release
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            # docker-compose exec ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Release
              . ~/spack/share/spack/setup-env.sh
              spack env activate aperi-mech
              mpirun -np 3 ./unit_tests
            ' || { echo "Unit tests in parallel step failed"; exit 1; }
          EOF

      - name: Build project, Debug
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech
              echo "Setting up Spack environment..."
              . ~/spack/share/spack/setup-env.sh

              echo "Configuring project..."
              ./do_configure --build-type Debug

              echo "Building project..."
              cd build/Debug
              make clean
              make -j 4
            '  || { echo "Build project step failed"; exit 1; }
          EOF

      - name: Run unit tests, Debug
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Debug
              make run_all_unit_tests
            '  || { echo "Unit tests step failed"; exit 1; }
          EOF

      - name: Run unit tests in parallel, Debug
        run: |
          ssh -T -o ConnectTimeout=10 ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            cd ~/aperi-mech
            docker-compose run --rm ${{ secrets.DOCKER_SERVICE }} /bin/bash -c '
              cd ~/aperi-mech/build/Debug
              . ~/spack/share/spack/setup-env.sh
              spack env activate aperi-mech
              mpirun -np 3 ./unit_tests
            ' || { echo "Unit tests in parallel step failed"; exit 1; }
          EOF

  teardown:
    runs-on: ubuntu-latest
    needs: [setup, build-and-test]
    steps:

      - name: Stop Azure VM
        if: always() && needs.setup.outputs.vm_started == 'true'
        uses: azure/CLI@v2
        with:
          azcliversion: 2.62.0
          inlineScript: |
            echo "Logging into Azure..."
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
            if [ $? -eq 0 ]; then
              echo "Logged in successfully"
            else
              echo "Failed to login"
              exit 1
            fi
            echo "Setting Azure subscription..."
            az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            if [ $? -eq 0 ]; then
                echo "Subscription set successfully"
            else
                echo "Failed to set subscription"
                exit 1
            fi
            echo "Deallocating VM..."
            az vm deallocate --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_VM_NAME }}
            if [ $? -eq 0 ]; then
                echo "VM deallocated successfully"
            else
                echo "Failed to deallocate VM"
                exit 1
            fi
