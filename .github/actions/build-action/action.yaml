name: Build Project
description: Build the project with specified build type and GPU flag
inputs:
  VM_IP:
    description: IP address of the VM
    required: true
  SSH_PRIVATE_KEY:
    description: SSH private key for the VM
    required: true
  VM_USERNAME:
    description: Username for the VM
    required: true
  build-type:
    description: Build type (e.g., Release, Debug)
    required: true
  with-protego:
    description: Enable Protego build
    required: false
    default: "false"
  gpu:
    description: Enable GPU build
    required: true
    default: "false"
  code-coverage:
    description: Enable code coverage
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Common SSH and Azure CLI Setup
      uses: ./.github/actions/common-steps
      with:
        VM_IP: ${{ inputs.VM_IP }}
        SSH_PRIVATE_KEY: ${{ inputs.SSH_PRIVATE_KEY }}

    - name: Print inputs for debugging
      shell: bash
      run: |
        echo "build-type: ${{ inputs.build-type }}"
        echo "gpu: ${{ inputs.gpu }}"
        echo "code-coverage: ${{ inputs.code-coverage }}"
        echo "with-protego: ${{ inputs.with-protego }}"

    - name: Build project
      shell: bash
      run: |
        ssh -T -o ConnectTimeout=10 ${{ inputs.VM_USERNAME }}@${{ inputs.VM_IP }} << 'EOF'
          set -e # Exit on error
          cd ~/aperi-mech

          compose_file=docker-compose.yml
          service_name=aperi-mech-development
          # Check if GPU build is enabled and code coverage is not enabled, overriding gpu flag if code coverage is enabled
          if [ ${{ inputs.gpu }} == 'true' ] && [ ${{ inputs.code-coverage }} == 'false' ]; then
            compose_file=docker-compose_nvidia_t4_gpu.yml
            service_name=aperi-mech-gpu-development
          fi
          # Debugging
          echo "On VM, Compose file: $compose_file"
          echo "On VM, Service name: $service_name"

          docker-compose -f $compose_file run --rm $service_name /bin/bash -c '
            configure_flag=""
            build_root=build
            if [ ${{ inputs.with-protego }} == "true" ]; then
              build_root=protego-mech/build
              configure_flag=" --protego-mech"
            fi
            build_path="${build_root}/${{ inputs.build-type }}"
            if [ ${{ inputs.gpu }} == "true" ]; then
              configure_flag="${configure_flag} --gpu"
              build_path="${build_path}_gpu"
            fi

            # Check if code coverage is enabled, overriding gpu flag if code coverage is enabled
            if [ ${{ inputs.code-coverage }} == "true" ]; then
              configure_flag="${configure_flag} --code-coverage"
              build_path="${build_root}_code_coverage"
            fi
            # Debugging
            echo "In container, inputs.build-type: ${{ inputs.build-type }}"
            echo "In container, inputs.gpu: ${{ inputs.gpu }}"
            echo "In container, inputs.code-coverage: ${{ inputs.code-coverage }}"
            echo "In container, configure_flag: $configure_flag"
            echo "In container, build_path: $build_path"

            cd ~/aperi-mech
            echo "Setting up Spack environment..."
            . ~/spack/share/spack/setup-env.sh
            spack env activate aperi-mech

            echo "Configuring project..."
            # do_configure will set build type to Debug if code coverage is enabled
            ./do_configure --build-type ${{ inputs.build-type }} ${configure_flag}

            echo "Building project..."
            cd $build_path
            make -j 4
            if [ ${{ inputs.code-coverage }} == "true" ]; then
              make coverage
            fi
          '  || { echo "Build project step failed"; exit 1; }
        EOF
