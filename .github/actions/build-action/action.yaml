name: Build Project
description: Build the project with specified build type and GPU flag
inputs:
  VM_IP:
    description: IP address of the VM
    required: true
  SSH_PRIVATE_KEY:
    description: SSH private key for the VM
    required: true
  VM_USERNAME:
    description: Username for the VM
    required: true
  VM_KNOWN_HOST:
    description: Known hosts entry for the VM (optional, for static IP VMs)
    required: false
  build-type:
    description: Build type (e.g., Release, Debug)
    required: true
  with-protego:
    description: Enable Protego build
    required: true
  gpu:
    description: Enable GPU build
    required: true
  code-coverage:
    description: Enable code coverage
    required: false
    default: "false"
  vm-pool:
    description: VM pool mode (uses docker run instead of docker-compose)
    required: false
    default: "false"
  CICD_REPO_SECRET:
    description: GitHub token for accessing private submodules
    required: false
runs:
  using: composite
  steps:
    - name: Common SSH Setup
      uses: ./.github/actions/common-ssh-and-azure-steps
      with:
        VM_IP: ${{ inputs.VM_IP }}
        SSH_PRIVATE_KEY: ${{ inputs.SSH_PRIVATE_KEY }}
        VM_KNOWN_HOST: ${{ inputs.VM_KNOWN_HOST }}

    - name: Print inputs for debugging
      shell: bash
      run: |
        echo "build-type: ${{ inputs.build-type }}"
        echo "gpu: ${{ inputs.gpu }}"
        echo "code-coverage: ${{ inputs.code-coverage }}"
        echo "with-protego: ${{ inputs.with-protego }}"
        echo "vm-pool: ${{ inputs.vm-pool }}"

    - name: Build project
      shell: bash
      env:
        CICD_REPO_SECRET: ${{ inputs.CICD_REPO_SECRET }}
      run: |
        python3 ./.github/actions/build-action/build.py \
          --ip ${{ inputs.VM_IP }} \
          --username ${{ inputs.VM_USERNAME }} \
          --build-type ${{ inputs.build-type }} \
          --gpu ${{ inputs.gpu }} \
          --code-coverage ${{ inputs.code-coverage }} \
          --protego ${{ inputs.with-protego }} \
          --vm-pool ${{ inputs.vm-pool }}
        exit_code=$?
        if [ $exit_code -ne 0 ]; then
          echo "Build failed with exit code $exit_code"
          exit $exit_code
        fi
