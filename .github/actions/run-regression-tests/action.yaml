name: Run regression tests
description: Run regression tests on the VM, inside the Docker container
inputs:
  VM_IP:
    description: IP address of the VM
    required: true
  SSH_PRIVATE_KEY:
    description: SSH private key for the VM
    required: true
  VM_USERNAME:
    description: Username for the VM
    required: true
  gpu:
    description: Run GPU tests
    required: true
  parallel:
    description: Run parallel tests
    required: true
  build:
    description: The build type to run, release or debug
    required: true
  with-protego:
    description: Enable Protego build
    required: false
    default: "false"
  vm-pool:
    description: VM pool mode (uses docker run instead of docker-compose)
    required: false
    default: "false"
runs:
  using: composite
  steps:
    - name: Print inputs for debugging
      shell: bash
      run: |
        echo "gpu: ${{ inputs.gpu }}"
        echo "parallel: ${{ inputs.parallel }}"
        echo "build: ${{ inputs.build }}"
        echo "with-protego: ${{ inputs.with-protego }}"
        echo "vm-pool: ${{ inputs.vm-pool }}"

    - name: Run regression tests
      shell: bash
      run: |
        ssh -T -o ConnectTimeout=10 ${{ inputs.VM_USERNAME }}@${{ inputs.VM_IP }} << 'EOF'
          set -e

          # Build test flags
          test_flags=""
          if [ "${{ inputs.gpu }}" == "true" ]; then
            test_flags="$test_flags --gpu"
          else
            test_flags="$test_flags --cpu"
          fi

          if [ "${{ inputs.parallel }}" == "true" ]; then
            test_flags="$test_flags --parallel"
          else
            test_flags="$test_flags --serial"
          fi

          build_type_lower=$(echo "${{ inputs.build }}" | tr "[:upper:]" "[:lower:]")
          if [ "$build_type_lower" == "release" ]; then
            test_flags="$test_flags --release"
          else
            test_flags="$test_flags --debug"
          fi

          echo "Test flags: $test_flags"

          if [ "${{ inputs.vm-pool }}" == "true" ]; then
            # VM Pool mode: Use docker run
            docker_image="ghcr.io/aperijake/aperi-mech:cuda-t4"
            gpu_flag=""
            if [ "${{ inputs.gpu }}" == "true" ]; then
              gpu_flag="--gpus all"
            fi

            volume_mounts="-v /mnt/builds:/home/aperi-mech_docker/aperi-mech/build"
            if [ "${{ inputs.with-protego }}" == "true" ]; then
              volume_mounts="$volume_mounts -v /mnt/builds/protego-builds:/home/aperi-mech_docker/aperi-mech/protego-mech/build"
            fi

            docker run --rm $gpu_flag $volume_mounts \
              $docker_image /bin/bash -c "
                set -e

                echo 'Setting up Spack environment...'
                source /home/aperi-mech_docker/aperi-mech/venv/bin/activate
                spack env activate aperi-mech

                echo 'Running regression tests...'
                cd /home/aperi-mech_docker/aperi-mech/test/

                if [ \"${{ inputs.with-protego }}\" == \"true\" ]; then
                  ./run_regression_tests.py \\
                    --directory-file /home/aperi-mech_docker/aperi-mech/protego-mech/test/regression_tests/regression_test_paths.yaml \\
                    --build-dir /home/aperi-mech_docker/aperi-mech/protego-mech/build/ \\
                    $test_flags
                else
                  ./run_regression_tests.py \\
                    --directory ./regression_tests \\
                    --build-dir /home/aperi-mech_docker/aperi-mech/build/ \\
                    $test_flags
                fi
              " || { echo "Regression test step failed"; exit 1; }

          else
            # Old single-VM mode: Use docker-compose
            cd ~/aperi-mech

            compose_file=docker/docker-compose.yml
            service_name=aperi-mech-development
            if [ "${{ inputs.gpu }}" == "true" ]; then
              compose_file=docker/docker-compose_nvidia.yml
              service_name=aperi-mech-gpu-development
            fi

            echo "Compose file: $compose_file"
            echo "Service name: $service_name"

            docker-compose -f $compose_file run --rm $service_name /bin/bash -c "
              echo 'Setting up Spack environment...'
              source \$APERI_MECH_ROOT/venv/bin/activate
              spack env activate aperi-mech

              echo 'Running regression tests...'
              cd ~/aperi-mech_host/test/

              if [ \"${{ inputs.with-protego }}\" == \"true\" ]; then
                ./run_regression_tests.py \\
                  --directory-file ~/aperi-mech_host/protego-mech/test/regression_tests/regression_test_paths.yaml \\
                  --build-dir ~/aperi-mech_host/protego-mech/build/ \\
                  $test_flags
              else
                ./run_regression_tests.py \\
                  --directory ./regression_tests \\
                  --build-dir ~/aperi-mech_host/build/ \\
                  $test_flags
              fi
            " || { echo "Regression test step failed"; exit 1; }
          fi
        EOF
